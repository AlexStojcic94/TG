using GeoAPI.CoordinateSystems;
using GeoAPI.CoordinateSystems.Transformations;
using Npgsql;
using ProjNet.CoordinateSystems.Transformations;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Npgsql;
using SharpMap.Data;
using NetTopologySuite.Geometries;
using GeoAPI.Geometries;
using SharpMap.Data.Providers;

namespace TG
{
    public partial class Form1 : Form
    {

        private static AutoCompleteStringCollection allowedTypes = new AutoCompleteStringCollection();
        private int dragStartX;
        private int dragStartY;

        private void Form1_Load(object sender, EventArgs e){}
        public Form1()
        {
            InitializeComponent();
<<<<<<< HEAD

            Map.Image = Layers.layers.getMap();
=======
            _sharpMap = new SharpMap.Map(new Size(802, 362));
            _sharpMap.BackColor = Color.FromArgb(232, 232, 232);

            SharpMap.Layers.VectorLayer landuseLayer = new SharpMap.Layers.VectorLayer("Landuse");
            landuseLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "landuse", geomname, idname);
            landuseLayer.Style.Fill = new SolidBrush(Color.FromArgb(192, 236, 174));
            landuseLayer.Style.Outline = Pens.Green;
            landuseLayer.Style.EnableOutline = true;
            _sharpMap.Layers.Add(landuseLayer);

            SharpMap.Layers.VectorLayer roadsLayer = new SharpMap.Layers.VectorLayer("Roads");
            roadsLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "nis_routing", "geom_way", "id");
            roadsLayer.Style.Line.Width = 1;
            roadsLayer.Style.Line.Color = Color.WhiteSmoke;
            _sharpMap.Layers.Add(roadsLayer);
            
            //SharpMap.Layers.VectorLayer waterwaysLayer = new SharpMap.Layers.VectorLayer("Waterways");
            //waterwaysLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "waterways", geomname, idname);
            //waterwaysLayer.Style.Line.Width = 1;
            //waterwaysLayer.Style.Line.Color = Color.Blue;
            //_sharpMap.Layers.Add(waterwaysLayer);

            SharpMap.Layers.LabelLayer placesLayer = new SharpMap.Layers.LabelLayer("Places");
            placesLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "places", geomname, idname);
            placesLayer.LabelColumn = "name";
            placesLayer.Style.CollisionDetection = true;
            placesLayer.Style.CollisionBuffer = new SizeF(25, 25);
            placesLayer.MultipartGeometryBehaviour = SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.First;
            placesLayer.Style.Font = new Font(FontFamily.GenericSansSerif, 8);
            _sharpMap.Layers.Add(placesLayer);


            SharpMap.Layers.VectorLayer buildingsLayer = new SharpMap.Layers.VectorLayer("Buildings");
            buildingsLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "buildings", geomname, idname);
            buildingsLayer.Style.Fill = new SolidBrush(Color.FromArgb(192, 236, 174));
            buildingsLayer.Style.Outline = Pens.Green;
            buildingsLayer.Enabled = false;
            _sharpMap.Layers.Add(buildingsLayer);

            SharpMap.Layers.VectorLayer railwaysLayer = new SharpMap.Layers.VectorLayer("Railways");
            railwaysLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "railways", geomname, idname);
            railwaysLayer.Style.Line.Width = 1;
            railwaysLayer.Style.Line.Color = Color.DarkGray;
            railwaysLayer.Enabled = false;
            _sharpMap.Layers.Add(railwaysLayer);

            SharpMap.Layers.LabelLayer pointsLayer = new SharpMap.Layers.LabelLayer("Points");
            pointsLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "points", geomname, idname);
            pointsLayer.LabelColumn = "name";
            pointsLayer.Style.CollisionDetection = true;
            pointsLayer.Style.CollisionBuffer = new SizeF(50, 50);
            pointsLayer.MultipartGeometryBehaviour = SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.Largest;
            pointsLayer.Style.Font = new Font(FontFamily.GenericSansSerif, 8);
            pointsLayer.Enabled = false;
            _sharpMap.Layers.Add(pointsLayer);


            _sharpMap.ZoomToExtents();

            Map.Image = _sharpMap.GetMap();
>>>>>>> 0e5c9d3f98d8e68fce9f94b3f43e30dfcd8bb53d

            initSearch();
            initRoadSearch();
        }



        private void ZoomIn_Click(object sender, EventArgs e)
        {
            Map.Image = ZoomRegulator.zoomRegulator.ZoomIn();
        }

        private void ZoomOut_Click(object sender, EventArgs e)
        {
<<<<<<< HEAD
            Map.Image = ZoomRegulator.zoomRegulator.ZoomOut();
=======
            if (zoom_level == 3 && showBuilding)
            {
                var buildings_Layer = _sharpMap.Layers.Where(x => x.LayerName == "Buildings").FirstOrDefault();
                if (buildings_Layer != null)
                    buildings_Layer.Enabled = false;
            }
            if (zoom_level == 5 && showLandmarks)
            {
                var points_Layer = _sharpMap.Layers.Where(x => x.LayerName == "Points").FirstOrDefault();
                if (points_Layer != null)
                    points_Layer.Enabled = false;
            }
            if (zoom_level > 1)
            {
                zoom_level--;
                _sharpMap.Zoom = _sharpMap.Zoom / ZOOM_FACTOR;
                Map.Image = _sharpMap.GetMap();
            }

        }



        private void Map_MouseClick(object sender, MouseEventArgs e)
        {
            GeoAPI.Geometries.Coordinate p = _sharpMap.ImageToWorld(new PointF(e.X, e.Y));
            _sharpMap.Center.X = p.X;
            _sharpMap.Center.Y = p.Y;

            Map.Image = _sharpMap.GetMap();

>>>>>>> 0e5c9d3f98d8e68fce9f94b3f43e30dfcd8bb53d
        }
        

        private void Buildings_CheckedChanged(object sender, EventArgs e)
        {
            Map.Image = Layers.layers.changeBuildingsVisibility();
        }
        
        private void Railways_CheckedChanged(object sender, EventArgs e)
        {
            Map.Image = Layers.layers.changeRailwaysVisibility();
        }

        private void Points_CheckedChanged(object sender, EventArgs e)
        {
            Map.Image = Layers.layers.changePointsVisibility();
        }
        
        private void initRoadSearch()
        {
            var list = Layers.layers.getRoadNames();

            AutoCompleteStringCollection autoComplete = new AutoCompleteStringCollection();
            autoComplete.AddRange(list.ToArray());
            searchFrom.AutoCompleteCustomSource = autoComplete;
            searchTo.AutoCompleteCustomSource = autoComplete;
        }

        private void initSearch()
        {
            var list = Layers.layers.getNames();

            allowedTypes.AddRange(list.ToArray());
            SearchByName.AutoCompleteCustomSource = allowedTypes;
        }
        
        private void Map_MouseMove(object sender, MouseEventArgs e)
        {
<<<<<<< HEAD
            coordinates.Text = Layers.layers.getCoordinates(e.X, e.Y);
=======
            GeoAPI.Geometries.Coordinate p = _sharpMap.ImageToWorld(new PointF(e.X, e.Y));
            PointF pUTM = new PointF();

            IProjectedCoordinateSystem utmProj = Helpers.CoordinateSystem.CreateUtmProjection(34);
            IGeographicCoordinateSystem geoCS = utmProj.GeographicCoordinateSystem;
            CoordinateTransformationFactory ctFac = new CoordinateTransformationFactory();
            ICoordinateTransformation transform = ctFac.CreateFromCoordinateSystems(geoCS, utmProj);
            double[] c = new double[2];
            c[0] = p.X; c[1] = p.Y;
            c = transform.MathTransform.Transform(c);
            pUTM.X = (float)c[0]; pUTM.Y = (float)c[1];

            coordinates.Text = pUTM.X + " : " + pUTM.Y;            
>>>>>>> 0e5c9d3f98d8e68fce9f94b3f43e30dfcd8bb53d
        }

        private void SearchRoute_Click(object sender, EventArgs e)
        {
            Map.Image = Layers.layers.searchRoute(searchFrom.Text, searchTo.Text);
        }

        private void Map_MouseDown(object sender, MouseEventArgs e)
        {
            dragStartX = e.X;
            dragStartY = e.Y;
        }

        private void Map_MouseUp(object sender, MouseEventArgs e)
        {
            Map.Image = Layers.layers.recenterMap(dragStartX - e.X + Map.Size.Width / 2, dragStartY - e.Y + Map.Size.Height / 2);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            SharpMap.Layers.VectorLayer buildingsLayer = new SharpMap.Layers.VectorLayer("Buildings");
            //buildingsLayer.DataSource = new SharpMap.Data.Providers.PostGIS(connString, "buildings", geomname, idname);
            SharpMap.Data.Providers.PostGIS prov = new PostGIS(connString, "waterways", geomname, idname);
            prov.DefinitionQuery = "ST_Intersects(geom, ST_GeomFromText('POLYGON((21.84164191 43.33574271,21.94017554 43.3348687, 21.94498206 43.29727457, 21.85880805 43.29252682, 21.84164191 43.33574271))',3005))";
            buildingsLayer.DataSource = prov;
            buildingsLayer.Style.Line.Width = 1;
            buildingsLayer.Style.Line.Color = Color.Blue;
            buildingsLayer.Enabled = true;
            _sharpMap.Layers.Add(buildingsLayer);
            Map.Image = _sharpMap.GetMap();
        }
        
    }
}
